generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              Int              @id @default(autoincrement())
    name            String?          @db.VarChar(255)
    username        String           @unique @db.VarChar(255)
    email           String?          @unique @db.VarChar(255)
    emailVerified   DateTime?
    password        String           @db.VarChar(60)
    image           String?          @db.VarChar(4096)
    userPermissions UserPermission[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    createdById     Int?
    updatedById     Int?
}

model UserPermission {
    id          Int      @id @default(autoincrement())
    action      String   @db.VarChar(255)
    users       User[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById Int?
    updatedById Int?
}

model File {
    id               Int        @id @default(autoincrement())
    size             Int
    filepath         String     @db.VarChar(2048)
    originalFilename String?    @db.VarChar(1024)
    newFilename      String?    @db.VarChar(1024)
    filename         String?    @db.VarChar(1024)
    mimetype         String?    @db.VarChar(255)
    hash             String?    @db.VarChar(10)
    token            String?    @db.VarChar(32)
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    createdById      Int?
    updatedById      Int?
    TypeIcon         TypeIcon[]
}

model Client {
    id            Int            @id @default(autoincrement())
    username      String?        @db.VarChar(255)
    firstname     String?        @db.VarChar(255)
    lastname      String?        @db.VarChar(255)
    email         String?        @db.VarChar(255)
    phoneNumber   String?        @db.VarChar(255)
    companyName   String?        @db.VarChar(255)
    notes         String?
    addressId     Int?
    address       TypeAddress?   @relation(fields: [addressId], references: [id])
    orders        Order[]
    ordersArchive OrderArchive[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    createdById   Int?
    updatedById   Int?
}

model EmailCredential {
    id          Int      @id @default(autoincrement())
    host        String?  @db.VarChar(255)
    port        Int?
    user        String?  @db.VarChar(255)
    password    String?  @db.VarChar(255)
    secure      Boolean?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById Int?
    updatedById Int?
}

model EmailMessage {
    id            Int       @id @default(autoincrement())
    subject       String?   @db.VarChar(255)
    from          String?   @db.VarChar(255)
    to            String?   @db.VarChar(255)
    date          DateTime? @db.Timestamp(6)
    html          String?
    text          String?
    messageId     String?   @db.VarChar(255)
    headerLines   Json?
    textAsHtml    String?
    nextMessageId Int?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    createdById   Int?
    updatedById   Int?
}

model Expense {
    id            Int      @id @default(autoincrement())
    name          String?  @db.VarChar(255)
    cost          Decimal? @db.Decimal(10, 2)
    expensesCost  Int[]
    expensesNames String[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    createdById   Int?
    updatedById   Int?
}

model Global {
    id             Int      @id @default(autoincrement())
    title          String   @default("ShirtERP") @db.VarChar(255)
    welcomeMessage String   @default("Witaj w systemie ShirtERP")
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    createdById    Int?
    updatedById    Int?
}

model Icons {
    id          Int      @id @default(autoincrement())
    nameOfSet   String   @db.VarChar(255)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById Int?
    updatedById Int?
}

model Log {
    id          Int      @id @default(autoincrement())
    message     String?  @db.VarChar(255)
    type        String?  @db.VarChar(255)
    userId      Int?
    data        String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById Int?
    updatedById Int?
}

model OrderArchive {
    id                Int       @id @default(autoincrement())
    name              String?   @db.VarChar(255)
    status            String?   @db.VarChar(255)
    notes             String?
    price             String?   @db.VarChar(255)
    isPricePaid       Boolean?
    dateOfCompletion  DateTime? @db.Date
    tables            Json?
    designs           Json?
    emailMessagesText Json?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    createdById       Int?
    updatedById       Int?
    workTime          Decimal?  @db.Decimal(10, 2)
    clients           Client?   @relation(fields: [clientsId], references: [id])
    clientsId         Int?
}

model Order {
    id                Int          @id @default(autoincrement())
    name              String?      @db.VarChar(255)
    status            String?      @db.VarChar(255)
    notes             String?
    price             String?      @db.VarChar(255)
    isPricePaid       Boolean?
    dateOfCompletion  DateTime?    @db.Date
    tables            Json?
    designs           Json?
    emailMessagesText Json?
    workTime          Decimal?     @db.Decimal(10, 2)
    client            Client?      @relation(fields: [clientId], references: [id])
    address           TypeAddress? @relation(fields: [addressId], references: [id])
    clientId          Int?
    addressId         Int?
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    createdById       Int?
    updatedById       Int?
}

model Plugins {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById Int?
    updatedById Int?
}

model Procedure {
    id           Int      @id @default(autoincrement())
    name         String?  @db.VarChar(255)
    description  String?
    workstations Json?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    createdById  Int?
    updatedById  Int?
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String?  @db.VarChar(255)
    category    String?  @db.VarChar(255)
    description String?
    iconId      Int?
    variants    Json?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById Int?
    updatedById Int?
}

model Workstation {
    id               Int      @id @default(autoincrement())
    name             String?  @db.VarChar(255)
    description      String?
    iconId           Int?
    pluginConfig     Json?
    nextWorkstations Json?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    createdById      Int?
    updatedById      Int?
}

// Types

model TypeAddress {
    id              Int      @id @default(autoincrement())
    streetName      String?  @db.VarChar(255)
    streetNumber    String?  @db.VarChar(255)
    apartmentNumber String?  @db.VarChar(255)
    secondLine      String?  @db.VarChar(255)
    postCode        String?  @db.VarChar(255)
    city            String?  @db.VarChar(255)
    province        String?  @db.VarChar(255)
    Clients         Client[]
    Orders          Order[]
}

model TypeIcon {
    id     Int     @id @default(autoincrement())
    name   String? @db.VarChar(255)
    file   File?   @relation(fields: [fileId], references: [id])
    fileId Int?
}

model TypeLinkedList {
    id     Int  @id @default(autoincrement())
    prevId Int?
    nextId Int?
}

model TypeProduct {
    id    Int      @id @default(autoincrement())
    count Int?
    size  String?  @db.VarChar(255)
    notes String?  @db.VarChar(255)
    ready Boolean?
}
